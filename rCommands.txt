A short list of the most useful R commands

A summary of the most important commands with minimal examples. See the
relevant part of the guide <r.guide.html> for better examples. For all
of these commands, using the help(function) or ? function is the most
useful source of information. Unfortunately, knowing what to ask for
help about is the hardest problem.

See the R-reference card <http://www.rpad.org/Rpad/R-refcard.pdf>by Tom
Short for a much more complete list.

	GETTING HELP

help.start()   # general help
help(foo)      # help about function foo
?foo           # same thing
apropos("foo") # list all functions containing string foo
example(foo)   # show an example of function foo

# search for foo in help manuals and archived mailing lists
RSiteSearch("foo") 

# get vignettes on using installed packages
vignette()      # show available vingettes
vignette("foo") # show specific vignette 


	INSTALLING PACKAGES

install.package("packageName")


	DEBBUGING

traceback() % exact place where the error comes from
debug() % flag to enter a function in debugging mode: it takes only a function as argument
browser() %
trace()

With debug package:
mtrace(f) % First, call mtrace(f) to store debugging information on f, and to overwrite f with a debug-ready version 
	  % that will call the debugger itself. Second, do whatever you normally do at the command prompt to invoke f.
mtrace.off()
go(n)
bp(n, m>= 0)
qqq()


      INPUT AND DISPLAY

library(car)
data(Duncan)
                                           #read files with labels in first row
read.table(filename,header=TRUE)           #read a tab or space delimited file
read.table(filename,header=TRUE,sep=',')   #read csv files



         MOVING AROUND

ctrl + L 				  # clears the console
search()				  # shows the search paths for the workspace variables
objects() 				  # shows all the workspace variables
browse.workspace			  #a menu command that creates a window with information about all variables in the workspace
ls()                                      #list the variables in the workspace
rm(x)                                     #remove x from the workspace
rm(list=ls())                             #remove all the variables from the workspace
attach(mat)                               #make the names of the variables in the matrix or data frame available in the workspace
detach(mat)                               #releases the names



	MATRIX DATA MANIPULATION

x=c(1,2,4,8,16 )                           #create a data vector with specified elements
y=c(1:10)                                  #creat a data vector with elements 1-10
n=10
x1=c(rnorm(n))                             #create a n item vector of random normal deviates
y1=c(runif(n))+n                           #create another n item vector that has n added to each random uniform distribution
z=rbinom(n,size,prob)                      #create n samples of size "size" with probability prob from the binomial
vect=c(x,y)                                #combine them into one vector of length 2n
mat=cbind(x,y)                             #combine them into a n x 2 matrix
mat=rbind(x,y)				   #combine them into a 2 x n matrix
string3 <- paste(string1, string2, sep="") #combine strings 1 & 2 into a single string3	
mat[4,2]                                   #display the 4th row and the 2nd column
mat[3,]                                    #display the 3rd row
mat[,2]                                    #display the 2nd column
subset(dataset, v1 > 0  & v2 < 100)        #those objects meeting a logical criterion
subset(data.df,select=variables,logical)   #get those objects from a data frame that meet a criterion 
data.df[data.df=logical]                   #yet another way to get a subset
x[order(x$B),]                             #sort a dataframe by the order of the elements in B
x[order(x$A, -x$B),]			   #sort increasing for A and decreasing for B	
x[rev(order(x$B)),]                        #sort the dataframe in reverse order 
dataframe [ order( dataframe[,colnum]), ]
rev(x)      		#reverse the order of values in x


A <- matrix(1, 3, 4) 			# creates a matrix of ones*
rownames(A) <- c('one','two,'three')	# set rown names
colnames(A) <- c('a','b','c','d')	# set column names				
B <- array(1:24, c(4,2,3))		# creates an array
v <- 1:12		
C <- list(mat1.A=A, mat.2=B
attributes(A)
class(A)
mode(A)
dim(A)
tapply					# apply a function to a set of data
aggregate				# calculate some values on a set of data. VERY USEFUL FOR SUMMARY OF DATA
scan()
rep(c(1,2,3), 4)

num <- numeric(5) 			# CONSTRUCTOR FUNCTION
fac <- factor( c('a','b','c') 		# CONSTRUCTOR FUNCTION
is.   					# PREDICATIVE FUNCTIONS
as.   					# COERCION FUNCTIONS

new=old[,-n]                              		#drop the nth column
new=old[n,]                               		#drop the nth row
new=subset(old,logical)                   		#select those cases that meet the logical condition
complete = subset(data.df,complete.cases(data.df)) 	#find those cases with no missing values
new=old[n1:n2,n3:n4]                      		#select the n1 through n2 rows of variables n3 through n4)



replace(x, list, values)                 #remember to assign this to some object i.e., x <- replace(x,x==-9,NA) 
                                         #similar to the operation x[x==-9] <- NA

cut(x, breaks, labels = NULL,
    include.lowest = FALSE, right = TRUE, dig.lab = 3, ...)
Ex: cut (X, quantile(X, c(0, 1/3, 2/3 , 1), include.lowest=T, labels = c('low', 'med', 'high')

recode (X , '0:10= 1, 11:20=2, else = 3') # careful with the ' & "


round(x,n)                                #rounds the values of x to n decimal places
ceiling(x)                                #vector x of smallest integers > x
floor(x)                                  #vector x of largest interger < x
as.integer(x)                             #truncates real x to integers (compare to round(x,0)
as.integer(x < cutpoint)                  #vector x of 0 if less than cutpoint, 1 if greater than cutpoint)
factor(ifelse(a < cutpoint, "Neg", "Pos"))  #is another way to dichotomize and to make a factor for analysis 
transform(data.df,variable names = some operation) #can be part of a set up for a data set 

x%in%y                     #tests each element of x for membership in y
y%in%x                     #tests each element of y for membership in x
all(x%in%y)                #true if x is a proper subset of y
all(x)                     #for a vector of logical values, are they all true?
any(x)                     #for a vector of logical values, is at least one true?

colSums (x, na.rm = FALSE, dims = 1)
rowSums (x, na.rm = FALSE, dims = 1)
colMeans(x, na.rm = FALSE, dims = 1)
rowMeans(x, na.rm = FALSE, dims = 1)
rowsum(x, group, reorder = TRUE, ...)         	#finds row sums for each level of a grouping variable
apply(X, MARGIN, FUN, ...)                    	#applies the function (FUN) to either rows (1) or columns (2) on object X
apply(x,1,min)                             	#finds the minimum for each row
apply(x,2,max)                            dev.control                             #various control functions for printing/saving graphic files	#finds the maximum for each column
col.max(x)                                   	#another way to find which column has the maximum value for each row 
which.min(x)
which.max(x)
z=apply(big5r,1,which.min)               	#tells the row with the minimum value for every column



	DATA FRAMES MANIPULATION

x.df = data.frame(x1,x2,x3 ...)        	     #combine different kinds of data into a data frame
	as.data.frame()
	is.data.frame()
x = as.matrix()
scale()                                     #converts a data frame to standardized scores
names(data.frame) <- cbind('one', 'two', ...) # Adds names to data frame
str()					# See the structure and variables of a dataset		

	FUNCTIONS

One can create a function in an .r for later use. To load it to the workspace it is needed 
source("myFunc.r")



	STATISTICS AND TRANSFORMATIONS
 
max()
min()
mean(X, trim=0.1)
median()
sum()
var()     		#produces the variance covariance matrix
sd()      		#standard deviation
mad()    		#(median absolute deviation)
fivenum() 		#Tukey fivenumbers min, lowerhinge, median, upper hinge, max
table()    		#frequency counts of entries, ideally the entries are factors(although it works with integers or even reals)
scale(data,scale=T)   	#centers around the mean and scales by the sd)
cumsum(x)     		#cumulative sum, etc.
cumprod(x)
cummax(x)
cummin(x)
cor(x,y,use="pair")   	#correlation matrix for pairwise complete data, use="complete" for complete cases


# LOGARITHMIC TRANSFORMATIONS IN CAR PACKAGE
box.cox(vector, exp) 								# deprecated and replaced by bcPower
Ask(p, function(p) qq.plot(box.cox(income,p), ylab='transformed income'))   	# trial and error of exponents
logit()


# REGRESSION AND LINEAR MODEL
 
lm(x~y,data=dataset)                      	#basic linear model where x and y can be matrices  (see plot.lm for plotting options)
lm(Y~X1+X2)
lm(Y~X|W)                              
solve(A,B)                               #inverse of A * B   - used for linear regression
solve(A)                                 #inverse of A
factanal()
princomp()

# ANOVA & T-TEST
aov(x~y,data=datafile)  			#where x and y can be matrices
aov.ex1 = aov(DV~IV,data=data.ex1)  		#do the analysis of variance or
aov.ex2 = aov(DV~IV1*IV21,data=data.ex2)        #do a two way analysis of variance
print(model.tables(aov.ex1,"means"),digits=3)   #report the means and the number of subjects/cell
boxplot(DV~IV,data=data.ex1)        		#graphical summary appears in graphics window
t.test(x,g)
pairwise.t.test(x,g)
power.anova.test(groups = NULL, n = NULL, between.var = NULL,
                 within.var = NULL, sig.level = 0.05, power = NULL)
power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,
             power = NULL, type = c("two.sample", "one.sample", "paired"),
             alternative = c("two.sided", "one.sided"),strict = FALSE)  

# FITTING LINEAR MODELS


        
	 GRAPHICS


# Handling windows and saving files
pdf("mygraph.pdf") 		#pdf file
pdf(height=6, width=6)          #create a pdf file for output
win.metafile("mygraph.wmf") 	#windows metafile
png("mygraph.png") 		#png file
jpeg("mygraph.jpg") 		#jpeg file
bmp("mygraph.bmp") 		#bmp file
postscript("mygraph.ps") 	#postscript file 
x11()   			#opens a new window
dev.set()			#Specifices which window is active
dev.off()			#closes the window
graphics.off()			#closes all windows
dev.copy(png,filename) 		#save a figure
dev.control                     #various control functions for printing/saving graphic files


# Gral Plotting 

hist()                                   #histogram
plot()
plot(x,y,xlim=range(-1,1),ylim=range(-1,1),main=title)
identify()
plot(eatar,eanta,xlim=range(-1,1),ylim=range(-1,1),main=title)
identify(eatar,eanta,labels=labels(energysR[,1])  )       #dynamically puts names on the plots
matplot ()
biplot ())
plot(table(x))                          #plot the frequencies of levels in x
x= recordPlot()                         #save the current plot device output in the object x
replayPlot(x)                           #replot object x
locate()
boxplot(x,main="title")                  #boxplot (box and whiskers)


par(mfrow=c(nrow,mcol))                        			#number of rows and columns to graph
par(ask=TRUE)                             			#ask for user input before drawing a new graph
par(omi=c(0,0,1,0) )                      			#set the size of the outer margins 
mtext("some global title",3,outer=TRUE,line=1,cex=1.5)  	#note that we seem to need to add the global title last
                						#cex = character expansion factor 


symb=c(19,25,3,23)
colors=c("black","red","green","blue")
charact=c("S","T","N","H")
plot(PA, NAF, pch=symb[group], col=colors[group], bg=colors[condit], cex=1.5, main="Postive vs. Negative Affect by Film condition")
points(mPA, mNA, pch=symb[condit], cex=4.5, col=colors[condit], bg=colors[condit])
	
curve()
abline(a,b)
abline(a, b, untf = FALSE, ...)
abline(h=, untf = FALSE, ...)
abline(v=, untf = FALSE, ...)
abline(coef=, untf = FALSE, ...)
abline(reg=, untf = FALSE, ...)


title( "some title")                    #add a title to the first graph
legend()
pairs()                                 #SPLOM (scatter plot Matrix)
pairs.panels ()    			#SPLOM on lower off diagonal, histograms on diagonal, correlations on diagonal
                   			#not standard R, but uses a function found in useful.r 

layout(mat)                         	#specify where multiple graphs go on the page
                                    	#experiment with the magic code from Paul Murrell to do fancy graphic location
layout(rbind(c(1, 1, 2, 2, 3, 3),
             c(0, 4, 4, 5, 5, 0)))   
for (i in 1:5) {
  plot(i, type="n")
  text(1, i, paste("Plot", i), cex=4)
}


	DISTRIBUTIONS


beta(a, b)
gamma(x)
choose(n, k)
factorial(x)

# To generate random samples from a variety of distributions

rnorm(n,mean,sd)
dnorm(x, mean=0, sd=1, log = FALSE)     			 #normal distribution
pnorm(q, mean=0, sd=1, lower.tail = TRUE, log.p = FALSE)
qnorm(p, mean=0, sd=1, lower.tail = TRUE, log.p = FALSE)
rnorm(n, mean=0, sd=1)

runif(n,lower,upper)
dunif(x, min=0, max=1, log = FALSE)      			#uniform distribution
punif(q, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
qunif(p, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
runif(n, min=0, max=1)

rbinom(n,size,p)

sample(x, size, replace = FALSE, prob = NULL)      #samples with or without replacement



          WORKING WITH DATES

date <-strptime(as.character(date), "%m/%d/%y")   #change the date field to a internal form for time  
                                                  #see ?formats and ?POSIXlt  
as.Date
month= months(date)                #see also weekdays, Julian

Additional functions <r.useful.html>that I have created because I needed
some specific operation may be included in the workspace by issuing the
source command:

source(http://personality-project.org/r/useful.r)

These functions include:

#alpha.scale     #find coefficient alpha for a scale and a dataframe of items
#describe        give means, sd, skew, n, and se 
#summ.stats      #basic summary statistics by a grouping variable
#error.crosses   (error bars in two space)
#skew            find skew
#panel.cor       taken from the examples for pairs
#pairs.panels    adapted from panel.cor  --   gives a splom, histogram, and correlation matrix
#multi.hist  #plot multiple histograms
#correct.cor    #given a correlation matrix and a vector of reliabilities, correct for reliability
#fisherz        #convert pearson r to fisher z
#paired.r       #test for difference of dependent correlations
#count.pairwise  #count the number of good cases when doing pairwise analysis
#eigen.loadings  #convert eigen vector vectors to factor loadings by unnormalizing them
#principal       #yet another way to do a principal components analysis -- brute force eignvalue decomp 
#factor.congruence #find the factor congruence coeffiecints
#factor.model    #given a factor model, find the correlation matrix
#factor.residuals #how well does it fit?
#factor.rotate    # rotate two columns of a factor matrix by theta (in degrees)
#phi2poly       #convert a matrix of phi coefficients to polychoric correlations

------------------------------------------------------------------------
part of a short guide to R <r.guide.html>
Version of February 20, 2005
William Revelle <http://www.personality-project.org/revelle.html>
Department of Psychology <http://www.wcas.northwestern.edu/psych/>
Northwestern University <http://www.northwestern.edu/>
